<?xml version="1.0" encoding="UTF-8" ?>
<results version="2">
    <cppcheck version="1.82" />
    <errors>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: newname" verbose="Possible null pointer dereference: newname" cwe="476">
            <location file="calendar.c" line="43" info="Null pointer dereference" />
            <location file="calendar.c" line="42" info="Assignment &apos;newname=NULL&apos;, assigned value is 0" />
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: newloc" verbose="Possible null pointer dereference: newloc" cwe="476">
            <location file="calendar.c" line="47" info="Null pointer dereference" />
            <location file="calendar.c" line="46" info="Assignment &apos;newloc=NULL&apos;, assigned value is 0" />
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: newcomment" verbose="Possible null pointer dereference: newcomment" cwe="476">
            <location file="calendar.c" line="52" info="Null pointer dereference" />
            <location file="calendar.c" line="51" info="Assignment &apos;newcomment=NULL&apos;, assigned value is 0" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;me&apos; can be reduced." verbose="The scope of the variable &apos;me&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="file.c" line="33" />
        </error>
        <error id="invalidscanf" severity="warning" msg="fscanf() without field width limits can crash with huge input data." verbose='fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\012\012Sample program that can crash:\012\012#include &lt;stdio.h&gt;\012int main()\012{\012    char c[5];\012    scanf(&quot;%s&quot;, c);\012    return 0;\012}\012\012Typing in 5 or more characters may make the program crash. The correct usage here is &apos;scanf(&quot;%4s&quot;, c);&apos;, as the maximum field width does not include the terminating null byte.\012Source: http://linux.die.net/man/3/scanf\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c' cwe="119">
            <location file="file.c" line="78" />
        </error>
        <error id="resourceLeak" severity="error" msg="Resource leak: fp" verbose="Resource leak: fp" cwe="775">
            <location file="file.c" line="32" />
        </error>
        <error id="resourceLeak" severity="error" msg="Resource leak: fp" verbose="Resource leak: fp" cwe="775">
            <location file="file.c" line="84" />
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;event&apos; is assigned a value that is never used." verbose="Variable &apos;event&apos; is assigned a value that is never used." cwe="563">
            <location file="main.c" line="45" />
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;event2&apos; is assigned a value that is never used." verbose="Variable &apos;event2&apos; is assigned a value that is never used." cwe="563">
            <location file="main.c" line="50" />
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf() without field width limits can crash with huge input data." verbose='scanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\012\012Sample program that can crash:\012\012#include &lt;stdio.h&gt;\012int main()\012{\012    char c[5];\012    scanf(&quot;%s&quot;, c);\012    return 0;\012}\012\012Typing in 5 or more characters may make the program crash. The correct usage here is &apos;scanf(&quot;%4s&quot;, c);&apos;, as the maximum field width does not include the terminating null byte.\012Source: http://linux.die.net/man/3/scanf\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c' cwe="119">
            <location file="menu.c" line="286" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;date2week&apos; is never used." verbose="The function &apos;date2week&apos; is never used." cwe="561">
            <location file="menu.c" line="443" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;modifyEvent&apos; is never used." verbose="The function &apos;modifyEvent&apos; is never used." cwe="561">
            <location file="calendar.c" line="83" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;printEventList&apos; is never used." verbose="The function &apos;printEventList&apos; is never used." cwe="561">
            <location file="calendar.c" line="161" />
        </error>
        <error id="missingIncludeSystem" severity="information" msg="Cppcheck cannot find all the include files (use --check-config for details)" verbose="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config." />
    </errors>
</results>
